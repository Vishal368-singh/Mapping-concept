import {
  n,
  r as r3
} from "./chunk-LPPE3BWL.js";
import "./chunk-MABCGPK6.js";
import "./chunk-STSYHVZ7.js";
import {
  i as i2
} from "./chunk-XFCM3Y5K.js";
import {
  S
} from "./chunk-JMRTO7A5.js";
import {
  u
} from "./chunk-CPAR4GH5.js";
import "./chunk-LG7DNDXR.js";
import "./chunk-3AVVFCGD.js";
import "./chunk-MQMJWABQ.js";
import "./chunk-KZDQSMOZ.js";
import "./chunk-SBDMFUJU.js";
import "./chunk-NT6SMDK4.js";
import "./chunk-P7PJV4GM.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-RYUENKYI.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-MP5M3F6E.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-7OKA4GKF.js";
import "./chunk-4PT222DX.js";
import "./chunk-OMBSPV67.js";
import "./chunk-746KDGCX.js";
import "./chunk-6HGDBMB2.js";
import {
  p,
  r as r2
} from "./chunk-GHGPFZL4.js";
import {
  h
} from "./chunk-AMGZ6OY7.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import {
  e
} from "./chunk-HBXRDRMQ.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-2RL34CVC.js";
import "./chunk-AGQYHEEP.js";
import {
  g
} from "./chunk-JTZ24OTF.js";
import "./chunk-YNVT2YMA.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-JWJGV6PT.js";
import "./chunk-C7LICITY.js";
import "./chunk-K55CXVYD.js";
import "./chunk-ORDYVWX6.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-UYERGX5D.js";
import "./chunk-ZAUL2HRL.js";
import "./chunk-MHZNPCC3.js";
import "./chunk-5ZJMLCBK.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-IDSV3U3M.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-3LTBYQQS.js";
import "./chunk-27M3EN5Y.js";
import "./chunk-P5FXO7WR.js";
import "./chunk-UCCG5WDW.js";
import "./chunk-IVKSCXGN.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-DDNC6A36.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-T6TMEQJ7.js";
import "./chunk-5DBBCQVU.js";
import "./chunk-MNW46TV4.js";
import "./chunk-JSWMPOBX.js";
import "./chunk-SSVCVBFL.js";
import {
  s
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-5KQMTKIZ.js";
import "./chunk-PYBAZ6YE.js";
import "./chunk-YC5GI5YQ.js";
import {
  m
} from "./chunk-RJI4N3LT.js";
import {
  a2 as a
} from "./chunk-QSG5WGQI.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-CM3TIXEV.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3TN73U7K.js";
import "./chunk-SL5A7INV.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-YO7WHZZ7.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-JNYZ3I5R.js";
import {
  b
} from "./chunk-Q6OL33PY.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var y = [0, 0];
var _ = class extends i2(r3(S(u))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get tileMatrixSet() {
    const { activeLayer: e2 } = this.layer, { tileMatrixSet: t } = e2;
    if (t && s(t.tileInfo?.spatialReference, this.view.spatialReference)) return t;
    const i3 = this._getTileMatrixSetBySpatialReference(e2);
    return i3 && i3.id !== e2.tileMatrixSetId ? (e2.tileMatrixSetId = i3.id, i3) : null;
  }
  update(e2) {
    this._fetchQueue.pause(), this._fetchQueue.state = e2.state, this._tileStrategy.update(e2), this._fetchQueue.resume();
  }
  attach() {
    const e2 = this.tileMatrixSet?.tileInfo;
    e2 && (this._tileInfoView = new h(e2), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e3, t) => this.fetchTile(e3, t), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: true, acquireTile: (e3) => this.acquireTile(e3), releaseTile: (e3) => this.releaseTile(e3), tileInfoView: this._tileInfoView }), this.addAttachHandles(this._updatingHandles.add((() => [this.layer?.activeLayer?.styleId, this.tileMatrixSet]), (() => this.doRefresh()))), super.attach());
  }
  detach() {
    super.detach(), this._tileStrategy?.destroy(), this._fetchQueue?.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e2) {
    return this.layer.activeLayer.tileMatrixSets?.some(((t) => s(t.tileInfo?.spatialReference, e2))) ?? false;
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh(((e2) => this._updatingHandles.addPromise(this._enqueueTileFetch(e2))));
    }
  }
  acquireTile(e2) {
    const t = this._bitmapView.createTile(e2), i3 = t.bitmap;
    return [i3.x, i3.y] = this._tileInfoView.getTileCoords(y, t.key), i3.resolution = this._tileInfoView.getTileResolution(t.key), [i3.width, i3.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e2) {
    this._fetchQueue.abort(e2.key.id), this._bitmapView.removeChild(e2), e2.once("detach", (() => e2.destroy())), this.requestUpdate();
  }
  async fetchTile(e2, t = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r4, resamplingLevel: a2 = 0 } = t;
    if (!s2) return this._fetchImage(e2, r4);
    const l = new e(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e2.level, e2.row, e2.col, l, { signal: r4 }), o = await this._fetchImage(l, r4);
    } catch (n2) {
      if (b(n2)) throw n2;
      if (a2 < 3) {
        const i3 = this._tileInfoView.getTileParentId(e2.id);
        if (i3) {
          const s3 = new e(i3), r5 = await this.fetchTile(s3, { ...t, resamplingLevel: a2 + 1 });
          return n(this._tileInfoView, r5, s3, e2);
        }
      }
      throw n2;
    }
    return n(this._tileInfoView, o, l, e2);
  }
  canResume() {
    const e2 = super.canResume();
    return e2 ? null !== this.tileMatrixSet : e2;
  }
  async _enqueueTileFetch(e2) {
    if (!this._fetchQueue.has(e2.key.id)) {
      try {
        const t = await this._fetchQueue.push(e2.key);
        e2.bitmap.source = t, e2.bitmap.width = this._tileInfoView.tileInfo.size[0], e2.bitmap.height = this._tileInfoView.tileInfo.size[1], e2.once("attach", (() => this.requestUpdate()));
      } catch (s2) {
        b(s2) || i.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e2, t) {
    return this.layer.fetchImageBitmapTile(e2.level, e2.row, e2.col, { signal: t });
  }
  _getTileMatrixSetBySpatialReference(e2) {
    return e2.tileMatrixSets?.find(((e3) => s(e3.tileInfo?.spatialReference, this.view.spatialReference)));
  }
};
r([m({ readOnly: true })], _.prototype, "tileMatrixSet", null), _ = r([a("esri.views.2d.layers.WMTSLayerView2D")], _);
var w = _;
export {
  w as default
};
//# sourceMappingURL=WMTSLayerView2D-63D4AUPW.js.map
