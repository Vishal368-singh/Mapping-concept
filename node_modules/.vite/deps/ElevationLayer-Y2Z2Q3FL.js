import {
  p
} from "./chunk-O2BGI5S6.js";
import "./chunk-EF635WJ2.js";
import "./chunk-LHL64X3T.js";
import {
  h
} from "./chunk-7E66HRND.js";
import {
  l
} from "./chunk-NFFAJ4DB.js";
import "./chunk-SPM2JNCJ.js";
import "./chunk-W7U4L72B.js";
import {
  m as m2
} from "./chunk-MFXSVG6W.js";
import "./chunk-J5NIIGPZ.js";
import "./chunk-MX6AIKIJ.js";
import {
  b2 as b,
  y
} from "./chunk-DTTR5ASY.js";
import {
  j
} from "./chunk-ATYN34E4.js";
import {
  S
} from "./chunk-I4RWKHDS.js";
import "./chunk-ETWYHKOD.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-RXV34U3K.js";
import "./chunk-UINE4WEI.js";
import "./chunk-ORDYVWX6.js";
import "./chunk-PPURGUUD.js";
import "./chunk-BCN3HEUP.js";
import "./chunk-JID2PGFV.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-AIZOVCLV.js";
import "./chunk-ALYXSRKO.js";
import "./chunk-ZTUZVYUT.js";
import "./chunk-OETYRBST.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-57B3FMIY.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import {
  h as h2
} from "./chunk-ISLYMPIF.js";
import "./chunk-EWC2SUBD.js";
import "./chunk-X2R3FJBU.js";
import "./chunk-BTVDNPEM.js";
import "./chunk-3U5B3VOX.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-MHZNPCC3.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-D4S6H6HS.js";
import "./chunk-IDSV3U3M.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-3LTBYQQS.js";
import "./chunk-YXZLRZNZ.js";
import "./chunk-YVNZKO6I.js";
import "./chunk-27M3EN5Y.js";
import "./chunk-DQBIAKCW.js";
import "./chunk-MOMLPET6.js";
import "./chunk-P5FXO7WR.js";
import "./chunk-UCCG5WDW.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-WAXP6XIO.js";
import "./chunk-IVKSCXGN.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-DDNC6A36.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-T6TMEQJ7.js";
import "./chunk-5DBBCQVU.js";
import {
  o
} from "./chunk-MNW46TV4.js";
import "./chunk-JSWMPOBX.js";
import "./chunk-SSVCVBFL.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-5KQMTKIZ.js";
import "./chunk-PYBAZ6YE.js";
import "./chunk-YC5GI5YQ.js";
import {
  m
} from "./chunk-RJI4N3LT.js";
import {
  a2 as a
} from "./chunk-QSG5WGQI.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-CM3TIXEV.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3TN73U7K.js";
import "./chunk-SL5A7INV.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  H
} from "./chunk-YO7WHZZ7.js";
import {
  v
} from "./chunk-OUZJZB6I.js";
import "./chunk-JNYZ3I5R.js";
import {
  a as a2,
  s as s2,
  t2 as t
} from "./chunk-Q6OL33PY.js";
import {
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/support/ElevationTileData.js
var a3 = class {
  constructor(a4, t3, s4, e) {
    this._hasNoDataValues = null, this._minValue = null, this._maxValue = null, "pixelData" in a4 ? (this.values = a4.pixelData, this.width = a4.width, this.height = a4.height, this.noDataValue = a4.noDataValue) : (this.values = a4, this.width = t3, this.height = s4, this.noDataValue = e);
  }
  get hasNoDataValues() {
    if (null == this._hasNoDataValues) {
      const a4 = this.noDataValue;
      this._hasNoDataValues = this.values.includes(a4);
    }
    return this._hasNoDataValues;
  }
  get minValue() {
    return this._ensureBounds(), this._minValue;
  }
  get maxValue() {
    return this._ensureBounds(), this._maxValue;
  }
  get cachedMemory() {
    return this.values.byteLength + 256;
  }
  _ensureBounds() {
    if (null != this._minValue) return;
    const { noDataValue: a4, values: t3 } = this;
    let s4 = 1 / 0, e = -1 / 0, i = true;
    for (const h3 of t3) h3 === a4 ? this._hasNoDataValues = true : (s4 = h3 < s4 ? h3 : s4, e = h3 > e ? h3 : e, i = false);
    i ? (this._minValue = 0, this._maxValue = 0) : (this._minValue = s4, this._maxValue = e > -3e38 ? e : 0);
  }
};

// node_modules/@arcgis/core/layers/support/LercDecoder.js
var r2 = class extends h {
  constructor(e = null) {
    super("LercWorker", "_decode", { _decode: (e2) => [e2.buffer] }, e, { strategy: "dedicated" }), this.schedule = e, this.ref = 0;
  }
  decode(e, r3, t3) {
    return e && 0 !== e.byteLength ? this.invoke({ buffer: e, options: r3 }, t3) : Promise.resolve(null);
  }
  release() {
    --this.ref <= 0 && (t2.forEach(((e, r3) => {
      e === this && t2.delete(r3);
    })), this.destroy());
  }
};
var t2 = /* @__PURE__ */ new Map();
function s3(e = null) {
  let s4 = t2.get(e);
  return s4 || (null != e ? (s4 = new r2(((r3) => e.immediate.schedule(r3))), t2.set(e, s4)) : (s4 = new r2(), t2.set(null, s4))), ++s4.ref, s4;
}

// node_modules/@arcgis/core/layers/ElevationLayer.js
var S2 = class extends p(l(b(j(S(h2))))) {
  constructor(...e) {
    super(...e), this.capabilities = { operations: { supportsTileMap: false } }, this.copyright = null, this.heightModelInfo = null, this.path = null, this.minScale = void 0, this.maxScale = void 0, this.opacity = 1, this.operationalLayerType = "ArcGISTiledElevationServiceLayer", this.sourceJSON = null, this.type = "elevation", this.url = null, this.version = null, this._lercDecoder = s3();
  }
  normalizeCtorArgs(e, r3) {
    return "string" == typeof e ? { url: e, ...r3 } : e;
  }
  destroy() {
    this._lercDecoder = t(this._lercDecoder);
  }
  readCapabilities(e, r3) {
    const t3 = r3.capabilities && r3.capabilities.split(",").map(((e2) => e2.toLowerCase().trim()));
    if (!t3) return { operations: { supportsTileMap: false } };
    return { operations: { supportsTileMap: t3.includes("tilemap") } };
  }
  readVersion(e, r3) {
    let t3 = r3.currentVersion;
    return t3 || (t3 = 9.3), t3;
  }
  load(e) {
    const r3 = null != e ? e.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Image Service"], supportsData: false, validateItem: (e2) => {
      if (e2.typeKeywords) {
        for (let r4 = 0; r4 < e2.typeKeywords.length; r4++) if ("elevation 3d layer" === e2.typeKeywords[r4].toLowerCase()) return true;
      }
      throw new s("portal:invalid-layer-item-type", "Invalid layer item type '${type}', expected '${expectedType}' ", { type: "Image Service", expectedType: "Image Service Elevation 3D Layer" });
    } }, e).catch(a2).then((() => this._fetchImageService(r3)))), Promise.resolve(this);
  }
  fetchTile(e, t3, i, o2) {
    const s4 = o2?.signal, a4 = { responseType: "array-buffer", signal: s4 }, p2 = { noDataValue: o2?.noDataValue, returnFileInfo: true };
    return this.load().then((() => this._fetchTileAvailability(e, t3, i, o2))).then((() => H(this.getTileUrl(e, t3, i), a4))).then(((e2) => this._lercDecoder.decode(e2.data, p2, s4))).then(((e2) => new a3(e2)));
  }
  getTileUrl(e, r3, t3) {
    const i = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, o2 = v({ ...this.parsedUrl.query, blankTile: !i && null });
    return `${this.parsedUrl.path}/tile/${e}/${r3}/${t3}${o2 ? "?" + o2 : ""}`;
  }
  async queryElevation(e, r3) {
    const { ElevationQuery: t3 } = await import("./ElevationQuery-KOCELNIR.js");
    s2(r3);
    return new t3().query(this, e, r3);
  }
  async createElevationSampler(e, r3) {
    const { ElevationQuery: t3 } = await import("./ElevationQuery-KOCELNIR.js");
    s2(r3);
    return new t3().createSampler(this, e, r3);
  }
  _fetchTileAvailability(e, r3, t3, i) {
    return this.tilemapCache ? this.tilemapCache.fetchAvailability(e, r3, t3, i) : Promise.resolve("unknown");
  }
  async _fetchImageService(e) {
    if (this.sourceJSON) return this.sourceJSON;
    const t3 = { query: { f: "json", ...this.parsedUrl.query }, responseType: "json", signal: e }, i = await H(this.parsedUrl.path, t3);
    i.ssl && (this.url = this.url?.replace(/^http:/i, "https:")), this.sourceJSON = i.data, this.read(i.data, { origin: "service", url: this.parsedUrl });
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[w];
  }
};
r([m({ readOnly: true })], S2.prototype, "capabilities", void 0), r([o("service", "capabilities", ["capabilities"])], S2.prototype, "readCapabilities", null), r([m({ json: { read: { source: "copyrightText" } } })], S2.prototype, "copyright", void 0), r([m({ readOnly: true, type: m2 })], S2.prototype, "heightModelInfo", void 0), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], S2.prototype, "path", void 0), r([m({ type: ["show", "hide"] })], S2.prototype, "listMode", void 0), r([m({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], S2.prototype, "minScale", void 0), r([m({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], S2.prototype, "maxScale", void 0), r([m({ json: { read: false, write: false, origins: { "web-document": { read: false, write: false } } } })], S2.prototype, "opacity", void 0), r([m({ type: ["ArcGISTiledElevationServiceLayer"] })], S2.prototype, "operationalLayerType", void 0), r([m()], S2.prototype, "sourceJSON", void 0), r([m({ json: { read: false }, value: "elevation", readOnly: true })], S2.prototype, "type", void 0), r([m(y)], S2.prototype, "url", void 0), r([m()], S2.prototype, "version", void 0), r([o("version", ["currentVersion"])], S2.prototype, "readVersion", null), S2 = r([a("esri.layers.ElevationLayer")], S2);
var w = Symbol("default-fetch-tile");
S2.prototype.fetchTile[w] = true;
var T = S2;
export {
  T as default
};
//# sourceMappingURL=ElevationLayer-Y2Z2Q3FL.js.map
