import {
  r as r2
} from "./chunk-OOIBBSWY.js";
import {
  r as r3
} from "./chunk-CW6A6WJK.js";
import "./chunk-3KDNHMA3.js";
import "./chunk-IE6QJMDY.js";
import {
  d
} from "./chunk-WMXZPLHN.js";
import {
  c,
  f
} from "./chunk-37USNU2Q.js";
import {
  l,
  t,
  u as u2
} from "./chunk-6HFOX7HL.js";
import "./chunk-C4QP4LFT.js";
import "./chunk-WHNSSW5C.js";
import "./chunk-RHVCSVQD.js";
import "./chunk-HUR2TTV7.js";
import "./chunk-DPEZN2CZ.js";
import "./chunk-6T6LJGGM.js";
import "./chunk-HPADPQJ7.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-7HWQNQIF.js";
import "./chunk-REIVHO5B.js";
import "./chunk-7IV6VAPN.js";
import "./chunk-WX3VZIBK.js";
import "./chunk-2RL34CVC.js";
import {
  P
} from "./chunk-MFUILZVS.js";
import "./chunk-FCLAVZUU.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import {
  w
} from "./chunk-K3VYMAVM.js";
import "./chunk-C7LICITY.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-U5KBQRKK.js";
import "./chunk-L2J7BAWS.js";
import "./chunk-7CUUAFJU.js";
import "./chunk-RSDQMJRT.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ORDYVWX6.js";
import {
  O,
  U
} from "./chunk-JID2PGFV.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-HVRIX7CX.js";
import "./chunk-GCTIF24Q.js";
import {
  u
} from "./chunk-D245JBVP.js";
import "./chunk-RXG6HQCK.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-EWC2SUBD.js";
import "./chunk-X2R3FJBU.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-C6OAHV3Z.js";
import "./chunk-3U5B3VOX.js";
import "./chunk-ZAUL2HRL.js";
import "./chunk-D4S6H6HS.js";
import "./chunk-N7OU5PYY.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-3LTBYQQS.js";
import "./chunk-27M3EN5Y.js";
import "./chunk-DQBIAKCW.js";
import "./chunk-MOMLPET6.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-WAXP6XIO.js";
import "./chunk-IVKSCXGN.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-DDNC6A36.js";
import {
  s
} from "./chunk-ZJQPHR3K.js";
import "./chunk-T6TMEQJ7.js";
import "./chunk-5DBBCQVU.js";
import "./chunk-MNW46TV4.js";
import "./chunk-JSWMPOBX.js";
import "./chunk-SSVCVBFL.js";
import {
  j
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-5KQMTKIZ.js";
import "./chunk-PYBAZ6YE.js";
import "./chunk-YC5GI5YQ.js";
import {
  b,
  m
} from "./chunk-RJI4N3LT.js";
import {
  a2 as a
} from "./chunk-QSG5WGQI.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-CM3TIXEV.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3TN73U7K.js";
import "./chunk-SL5A7INV.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-YO7WHZZ7.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-Q6OL33PY.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/interactive/snapping/GridSnappingEngine.js
var w2 = class extends b {
  constructor(t2) {
    super(t2), this.options = null;
  }
  destroy() {
    this._set("options", null);
  }
  get grid() {
    return this.view.grid;
  }
  get effectiveViewRotation() {
    return this.grid?.rotateWithMap ? 0 : s(this.view.rotation ?? 0);
  }
  get gridRotation() {
    return s(this.grid?.rotation ?? 0);
  }
  get gridCenter() {
    const { spatialReference: t2, grid: e } = this;
    if (!e || !t2 || !U(e.center.spatialReference, t2)) return null;
    try {
      const r4 = O(e.center, t2), i2 = t2.isWrappable && null != this.view?.center ? P(r4.x, this.view.center.x, t2) : r4.x;
      return f(i2, r4.y, r4.z);
    } catch (i2) {
      return i.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.", i2), null;
    }
  }
  get offsetScaleFactor() {
    const { pixelsPerStride: t2, grid: e } = this;
    if (!e || !t2) return 1;
    const { majorLineInterval: r4, dynamicScaling: i2 } = e;
    return r4 < 1 ? null : l(r4, t2, i2);
  }
  get spatialReference() {
    return this.view.spatialReference;
  }
  get gridMetersPerStride() {
    const { grid: t2 } = this;
    return t2 ? j(t2.spacing, t2.units, "meters") : null;
  }
  get viewMetersPerPixel() {
    const { viewMetersPerSRUnit: t2 } = this;
    return null == t2 ? null : t2 * u(this.view.scale, this.view.spatialReference);
  }
  get viewMetersPerSRUnit() {
    const { spatialReference: t2 } = this.view;
    return this.gridCenter ? u2(this.gridCenter[0], this.gridCenter[1], t2) : null;
  }
  get pixelsPerStride() {
    const { gridMetersPerStride: t2, viewMetersPerPixel: e } = this;
    return e && t2 ? t2 / e : null;
  }
  get updating() {
    return null != this.grid && null != this.spatialReference && null == this.viewMetersPerSRUnit;
  }
  async fetchCandidates(t2, e, r4) {
    const { options: i2, view: n } = this;
    if (!i2?.effectiveGridEnabled || !n.grid || r4.feature?.attributes && d in r4.feature.attributes) return [];
    const o = r4.coordinateHelper.arrayToPoint(t2), s2 = i2.distance * ("touch" === r4.pointer ? i2.touchSensitivityMultiplier : 1);
    return this.fetchCandidatesSync(o, s2);
  }
  fetchCandidatesSync(t2, e) {
    const r4 = [], { grid: i2, effectiveViewRotation: n, gridRotation: o, gridCenter: s2, viewMetersPerPixel: a2, viewMetersPerSRUnit: c2, offsetScaleFactor: u3, spatialReference: g, gridMetersPerStride: f2, pixelsPerStride: m2 } = this;
    if (!(i2 && a2 && c2 && s2 && g && u3 && f2 && m2)) return r4;
    if (!i2.dynamicScaling && m2 < t) return r4;
    if (!U(t2.spatialReference, g)) return r4;
    const S = O(t2, g), w3 = f(S.x, S.y, S.z), x = P2(w3, -o, s2, -n), C = f2 / c2 * u3, U2 = j2(x, C, s2), { shouldSnapX: b2, shouldSnapY: L } = R(U2, x, e, a2, c2);
    if (!b2 && !L) return [];
    const z = f((b2 ? U2 : x)[0], (L ? U2 : x)[1]), E = P2(z, o, s2, n), F = P2(U2, o, s2, n);
    if (L) {
      const t3 = M(U2, x, C, "y"), e2 = P2(t3, o, s2, n);
      r4.push(new r3({ lineStart: F, lineEnd: e2, targetPoint: E, isDraped: false }));
    }
    if (b2) {
      const t3 = M(U2, x, C, "x"), e2 = P2(t3, o, s2, n);
      r4.push(new r3({ lineStart: F, lineEnd: e2, targetPoint: E, isDraped: false }));
    }
    return b2 && L && r4.push(new r2(E, r4[0], r4[1], false)), r4;
  }
};
r([m({ constructOnly: true })], w2.prototype, "view", void 0), r([m()], w2.prototype, "options", void 0), r([m()], w2.prototype, "grid", null), r([m()], w2.prototype, "effectiveViewRotation", null), r([m()], w2.prototype, "gridRotation", null), r([m()], w2.prototype, "gridCenter", null), r([m()], w2.prototype, "offsetScaleFactor", null), r([m()], w2.prototype, "spatialReference", null), r([m()], w2.prototype, "gridMetersPerStride", null), r([m()], w2.prototype, "viewMetersPerPixel", null), r([m()], w2.prototype, "viewMetersPerSRUnit", null), r([m()], w2.prototype, "pixelsPerStride", null), r([m()], w2.prototype, "updating", null), w2 = r([a("esri.views.interactive.snapping.GridSnappingEngine")], w2);
var P2 = (t2, e, r4, i2) => {
  const n = c(t2[0], t2[1], t2[2]);
  return w(n, w(n, n, r4, e), r4, i2);
};
var j2 = (t2, e, r4) => {
  const i2 = (t2[0] - r4[0]) / e, n = (t2[1] - r4[1]) / e, o = Math.trunc(i2), s2 = Math.trunc(n), a2 = Math.round(i2 % 1), p = Math.round(n % 1), l2 = r4[0] + (o + a2) * e, c2 = r4[1] + (s2 + p) * e;
  return f(l2, c2);
};
var R = (t2, e, r4, i2, n) => {
  if (i2 <= 0) return { shouldSnapX: false, shouldSnapY: false };
  const o = (t2[0] - e[0]) / i2, s2 = (t2[1] - e[1]) / i2;
  return { shouldSnapX: Math.abs(o * n) < r4, shouldSnapY: Math.abs(s2 * n) < r4 };
};
var M = (t2, e, r4, i2) => {
  if ("y" === i2) {
    const i3 = e[0] > t2[0] ? 1 : -1;
    return f(t2[0] + r4 * i3, t2[1]);
  }
  const n = e[1] > t2[1] ? 1 : -1;
  return f(t2[0], t2[1] + r4 * n);
};
export {
  w2 as GridSnappingEngine
};
//# sourceMappingURL=GridSnappingEngine-FEL7SAWY.js.map
