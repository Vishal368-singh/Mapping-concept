import {
  n,
  o,
  r as r3
} from "./chunk-LPPE3BWL.js";
import {
  P,
  _,
  i as i3
} from "./chunk-CUAJLHZX.js";
import {
  r as r4
} from "./chunk-7Y5FR47D.js";
import {
  a as a2
} from "./chunk-I4Q73657.js";
import "./chunk-MABCGPK6.js";
import "./chunk-STSYHVZ7.js";
import "./chunk-WDVFH7KX.js";
import "./chunk-DTM4MB6E.js";
import "./chunk-MYP3DTMZ.js";
import "./chunk-74S7BOR4.js";
import {
  O
} from "./chunk-ZZRUJFYC.js";
import {
  i as i2
} from "./chunk-XFCM3Y5K.js";
import {
  S
} from "./chunk-JMRTO7A5.js";
import {
  u
} from "./chunk-CPAR4GH5.js";
import "./chunk-HQ6PSXYA.js";
import "./chunk-LG7DNDXR.js";
import "./chunk-6IF3JKWT.js";
import "./chunk-OET5KRLL.js";
import "./chunk-3AVVFCGD.js";
import "./chunk-MQMJWABQ.js";
import "./chunk-KZDQSMOZ.js";
import "./chunk-SBDMFUJU.js";
import "./chunk-NT6SMDK4.js";
import "./chunk-P7PJV4GM.js";
import "./chunk-OI5B3CQU.js";
import "./chunk-GYPE5A7A.js";
import "./chunk-JHCRE356.js";
import "./chunk-SMJO7RZ5.js";
import "./chunk-CO23VBIK.js";
import "./chunk-VBCNZP4X.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-FXWNGVAA.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-WBLLSCDT.js";
import "./chunk-AY4NSV7O.js";
import "./chunk-KKLYYV7Q.js";
import "./chunk-JGOUYH3H.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-3MYC6RMM.js";
import "./chunk-6MUFWCHN.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-R4U6PM2D.js";
import "./chunk-DQPK7WFY.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-RYUENKYI.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-PKVVYANP.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-C5RMBVA5.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-CVOKTKTG.js";
import "./chunk-WC2H7YQR.js";
import "./chunk-YO4EMXYF.js";
import "./chunk-TBTLKLMN.js";
import "./chunk-WXBUIB3W.js";
import "./chunk-MP5M3F6E.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-BQDOBUFI.js";
import "./chunk-JWSEYL4W.js";
import "./chunk-REIVHO5B.js";
import "./chunk-7IV6VAPN.js";
import "./chunk-7OKA4GKF.js";
import "./chunk-4PT222DX.js";
import "./chunk-OMBSPV67.js";
import {
  c as c2
} from "./chunk-746KDGCX.js";
import "./chunk-ZWEFRGF6.js";
import "./chunk-OB2KZAI3.js";
import "./chunk-SVGSXWMQ.js";
import "./chunk-QZBNKN5E.js";
import "./chunk-6HGDBMB2.js";
import "./chunk-D5KSFCG5.js";
import {
  p,
  r as r2
} from "./chunk-GHGPFZL4.js";
import {
  h
} from "./chunk-AMGZ6OY7.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import {
  e as e2
} from "./chunk-HBXRDRMQ.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-2RL34CVC.js";
import "./chunk-AGQYHEEP.js";
import {
  g
} from "./chunk-JTZ24OTF.js";
import "./chunk-YNVT2YMA.js";
import "./chunk-MFUILZVS.js";
import "./chunk-FCLAVZUU.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-JWJGV6PT.js";
import "./chunk-C7LICITY.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-PBSVJCDQ.js";
import "./chunk-64QOGJFE.js";
import "./chunk-CVYSDEQD.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-MYGPPQBX.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-XZ46MCDO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-G2VWR52Q.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-U5KBQRKK.js";
import "./chunk-L2J7BAWS.js";
import "./chunk-7CUUAFJU.js";
import "./chunk-RSDQMJRT.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ORDYVWX6.js";
import "./chunk-BCN3HEUP.js";
import "./chunk-JID2PGFV.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-HVRIX7CX.js";
import "./chunk-GCTIF24Q.js";
import "./chunk-D245JBVP.js";
import "./chunk-RXG6HQCK.js";
import "./chunk-ZTUZVYUT.js";
import {
  c
} from "./chunk-FLPDFTMO.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-EWC2SUBD.js";
import "./chunk-X2R3FJBU.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-2JMCZ3BT.js";
import "./chunk-7D32HQWD.js";
import "./chunk-Z7YG4UNG.js";
import "./chunk-2CS746FZ.js";
import "./chunk-6YSDDH6K.js";
import "./chunk-MCOL2MI5.js";
import "./chunk-AVMLDZZZ.js";
import "./chunk-IQQJPZC6.js";
import "./chunk-B5AZBN2H.js";
import "./chunk-C6OAHV3Z.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-UYERGX5D.js";
import "./chunk-BTVDNPEM.js";
import "./chunk-3U5B3VOX.js";
import "./chunk-ZAUL2HRL.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-MHZNPCC3.js";
import "./chunk-5ZJMLCBK.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-D4S6H6HS.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-IDSV3U3M.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-N7OU5PYY.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-3LTBYQQS.js";
import "./chunk-YXZLRZNZ.js";
import "./chunk-YVNZKO6I.js";
import "./chunk-27M3EN5Y.js";
import "./chunk-DQBIAKCW.js";
import "./chunk-MOMLPET6.js";
import "./chunk-P5FXO7WR.js";
import "./chunk-UCCG5WDW.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-WAXP6XIO.js";
import "./chunk-IVKSCXGN.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-DDNC6A36.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-T6TMEQJ7.js";
import "./chunk-5DBBCQVU.js";
import "./chunk-MNW46TV4.js";
import "./chunk-JSWMPOBX.js";
import "./chunk-SSVCVBFL.js";
import {
  s
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-5KQMTKIZ.js";
import "./chunk-PYBAZ6YE.js";
import "./chunk-YC5GI5YQ.js";
import {
  m
} from "./chunk-RJI4N3LT.js";
import {
  a2 as a
} from "./chunk-QSG5WGQI.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-CM3TIXEV.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3TN73U7K.js";
import "./chunk-SL5A7INV.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-YO7WHZZ7.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-JNYZ3I5R.js";
import {
  D,
  b,
  e
} from "./chunk-Q6OL33PY.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var I = [0, 0];
var P2 = class extends i2(r3(S(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new c(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), this._highlightView?.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null, i4 = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, i4?.effectiveMinLOD, i4?.effectiveMaxLOD), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, i5) => this.fetchTile(e4, i5), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), _(this, this.layer)) {
      const e4 = this._highlightView = new O({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new a2(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new P({ createFetchPopupFeaturesQueryGeometry: (e5, i5) => r4(e5, i5, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: ({ graphic: i5, property: t }) => e4.graphicUpdateHandler({ graphic: i5, property: t }), layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add((() => this.resampling), (() => {
      this.doRefresh();
    }))), super.attach();
  }
  detach() {
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._popupHighlightHelper?.destroy(), this._highlightView?.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeaturesAtLocation(e3, i4) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e3, i4) : [];
  }
  highlight(e3, t) {
    const s2 = i3(e3);
    if (0 === s2.length) return e();
    const r5 = t?.name ?? c2;
    return this._addHighlightGraphics(s2, r5), e((() => !this.destroyed && this._removeHighlightGraphics(s2, r5)));
  }
  _processHighlight() {
    const e3 = this._getHighlights();
    this._highlightView?.setHighlight(e3);
  }
  _addHighlightGraphics(e3, i4) {
    this._highlightGraphics.addMany(e3), this._addHighlights(e3.map(((e4) => e4.uid)), i4);
  }
  _removeHighlightGraphics(e3, i4) {
    this._highlightGraphics.removeMany(e3), this._removeHighlights(e3.map(((e4) => e4.uid)), i4);
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    return s(this.layer.tileInfo?.spatialReference, e3);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh(((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3))));
    }
  }
  acquireTile(e3) {
    const i4 = this._bitmapView.createTile(e3), t = i4.bitmap;
    return [t.x, t.y] = this._tileInfoView.getTileCoords(I, i4.key), t.resolution = this._tileInfoView.getTileResolution(i4.key), [t.width, t.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(i4)), this._bitmapView.addChild(i4), this.requestUpdate(), i4;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", (() => e3.destroy())), this.requestUpdate();
  }
  async fetchTile(e3, i4 = {}) {
    return this.tilemapCache ? this._fetchTileWithTilemapCache(e3, i4) : this._fetchTileWithoutTilemapCache(e3, i4);
  }
  async _fetchTileWithoutTilemapCache(e3, i4 = {}) {
    const { signal: t, resamplingLevel: r5 = 0 } = i4;
    try {
      return await this._fetchImage(e3, t);
    } catch (o2) {
      if (b(o2)) throw o2;
      if (!this.resampling) return o(this._tileInfoView.tileInfo.size);
      if (r5 < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          const s2 = new e2(t2), o3 = await this._fetchTileWithoutTilemapCache(s2, { ...i4, resamplingLevel: r5 + 1 });
          return n(this._tileInfoView, o3, s2, e3);
        }
      }
      return o(this._tileInfoView.tileInfo.size);
    }
  }
  async _fetchTileWithTilemapCache(e3, i4 = {}) {
    const t = this.tilemapCache, { signal: o2, resamplingLevel: l = 0 } = i4, h2 = new e2(0, 0, 0, 0);
    let a3, n2 = null;
    try {
      if (n2 = await t.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, h2, { signal: o2 }), !this.resampling && h2.level !== e3.level) return await D(i4), o(this._tileInfoView.tileInfo.size);
      a3 = await this._fetchImage(h2, o2);
    } catch (p2) {
      if (b(p2)) throw p2;
      if (this.resampling && "unknown" === n2 && l < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          h2.set(t2);
          try {
            a3 = await this._fetchTileWithTilemapCache(h2, { ...i4, resamplingLevel: l + 1 });
          } catch {
          }
        }
      }
    }
    return a3 ? this.resampling ? n(this._tileInfoView, a3, h2, e3) : a3 : o(this._tileInfoView.tileInfo.size);
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const i4 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = i4, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", (() => this.requestUpdate()));
      } catch (i4) {
        b(i4) || i.getLogger(this).error(i4);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, i4) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: i4 });
  }
};
r([m()], P2.prototype, "resampling", null), r([m()], P2.prototype, "tilemapCache", null), P2 = r([a("esri.views.2d.layers.TileLayerView2D")], P2);
var C = P2;
export {
  C as default
};
//# sourceMappingURL=TileLayerView2D-LEHXD2JC.js.map
