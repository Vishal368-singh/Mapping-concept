import {
  u as u4
} from "./chunk-OOO2FYSJ.js";
import "./chunk-VD4XM47S.js";
import {
  t
} from "./chunk-I5PRSUWQ.js";
import "./chunk-74S7BOR4.js";
import {
  O as O2
} from "./chunk-ZZRUJFYC.js";
import {
  S as S3,
  n as n2
} from "./chunk-JMRTO7A5.js";
import {
  u as u3
} from "./chunk-CPAR4GH5.js";
import "./chunk-HQ6PSXYA.js";
import "./chunk-LG7DNDXR.js";
import "./chunk-6IF3JKWT.js";
import "./chunk-OET5KRLL.js";
import "./chunk-3AVVFCGD.js";
import "./chunk-MQMJWABQ.js";
import {
  e
} from "./chunk-KZDQSMOZ.js";
import "./chunk-SBDMFUJU.js";
import "./chunk-NT6SMDK4.js";
import "./chunk-P7PJV4GM.js";
import {
  h as h2,
  p
} from "./chunk-WFSL6UJX.js";
import "./chunk-PWMG7PVD.js";
import {
  S as S2
} from "./chunk-I3EB2Q35.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-AY4NSV7O.js";
import "./chunk-JGOUYH3H.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-3MYC6RMM.js";
import "./chunk-6MUFWCHN.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-R4U6PM2D.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-RYUENKYI.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-PKVVYANP.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-CVOKTKTG.js";
import "./chunk-WC2H7YQR.js";
import "./chunk-TBTLKLMN.js";
import "./chunk-WXBUIB3W.js";
import "./chunk-MP5M3F6E.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-BQDOBUFI.js";
import "./chunk-7OKA4GKF.js";
import "./chunk-4PT222DX.js";
import "./chunk-OMBSPV67.js";
import "./chunk-746KDGCX.js";
import "./chunk-ZWEFRGF6.js";
import "./chunk-OB2KZAI3.js";
import "./chunk-SVGSXWMQ.js";
import "./chunk-QZBNKN5E.js";
import {
  S,
  a as a2
} from "./chunk-6HGDBMB2.js";
import "./chunk-D5KSFCG5.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-HBXRDRMQ.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-2RL34CVC.js";
import "./chunk-AGQYHEEP.js";
import "./chunk-MFUILZVS.js";
import "./chunk-FCLAVZUU.js";
import "./chunk-KPGNM4LZ.js";
import {
  P as P2
} from "./chunk-CAQUPYHC.js";
import "./chunk-BNQMKYX6.js";
import {
  n
} from "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-JWJGV6PT.js";
import "./chunk-C7LICITY.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-PBSVJCDQ.js";
import "./chunk-64QOGJFE.js";
import "./chunk-CVYSDEQD.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-MYGPPQBX.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-XZ46MCDO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-G2VWR52Q.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-U5KBQRKK.js";
import "./chunk-L2J7BAWS.js";
import "./chunk-7CUUAFJU.js";
import "./chunk-RSDQMJRT.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ORDYVWX6.js";
import "./chunk-BCN3HEUP.js";
import {
  O
} from "./chunk-JID2PGFV.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-HVRIX7CX.js";
import "./chunk-GCTIF24Q.js";
import "./chunk-RXG6HQCK.js";
import "./chunk-ZTUZVYUT.js";
import {
  c as c2
} from "./chunk-X3YITJPC.js";
import "./chunk-FLPDFTMO.js";
import "./chunk-B7UERVJI.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-GDFRDXFB.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-57B3FMIY.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-ISLYMPIF.js";
import "./chunk-EWC2SUBD.js";
import "./chunk-X2R3FJBU.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import {
  d
} from "./chunk-2JMCZ3BT.js";
import "./chunk-7D32HQWD.js";
import {
  x
} from "./chunk-Z7YG4UNG.js";
import "./chunk-2CS746FZ.js";
import "./chunk-6YSDDH6K.js";
import "./chunk-MCOL2MI5.js";
import "./chunk-AVMLDZZZ.js";
import {
  m as m3,
  u as u2
} from "./chunk-IQQJPZC6.js";
import {
  m as m2
} from "./chunk-B5AZBN2H.js";
import "./chunk-C6OAHV3Z.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-UYERGX5D.js";
import "./chunk-BTVDNPEM.js";
import "./chunk-3U5B3VOX.js";
import "./chunk-ZAUL2HRL.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-MHZNPCC3.js";
import "./chunk-5ZJMLCBK.js";
import "./chunk-QUZZIDFR.js";
import {
  l as l2
} from "./chunk-XNUSHDFN.js";
import "./chunk-D4S6H6HS.js";
import {
  c
} from "./chunk-4AKMPOG7.js";
import "./chunk-IDSV3U3M.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-N7OU5PYY.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-3LTBYQQS.js";
import "./chunk-YXZLRZNZ.js";
import "./chunk-YVNZKO6I.js";
import {
  f,
  h,
  l
} from "./chunk-27M3EN5Y.js";
import "./chunk-DQBIAKCW.js";
import "./chunk-MOMLPET6.js";
import "./chunk-P5FXO7WR.js";
import "./chunk-UCCG5WDW.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-WAXP6XIO.js";
import {
  P
} from "./chunk-IVKSCXGN.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-DDNC6A36.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-T6TMEQJ7.js";
import {
  _
} from "./chunk-5DBBCQVU.js";
import "./chunk-MNW46TV4.js";
import "./chunk-JSWMPOBX.js";
import "./chunk-SSVCVBFL.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-5KQMTKIZ.js";
import "./chunk-PYBAZ6YE.js";
import "./chunk-YC5GI5YQ.js";
import {
  m,
  r2
} from "./chunk-RJI4N3LT.js";
import {
  a2 as a
} from "./chunk-QSG5WGQI.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-CM3TIXEV.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3TN73U7K.js";
import "./chunk-SL5A7INV.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-YO7WHZZ7.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-JNYZ3I5R.js";
import {
  o4 as o,
  r2 as r3,
  u2 as u
} from "./chunk-Q6OL33PY.js";
import "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayMultipoint.js
var f2 = 2;
var x2 = class extends e {
  constructor(r4) {
    super(), this.element = r4, this._handles = new r2(), this.isWrapAround = false, this.perspectiveTransform = n(), this.wrapAroundShift = 0, this.clipGeometry = null, this._handles.add(f((() => this.element), (() => {
      const e2 = this.element;
      this.ready(), e2 && this._handles.add(o(e2, "play", (() => this.requestRender())));
    }), h));
  }
  getMesh(t2) {
    throw new Error("Method not implemented.");
  }
  destroy() {
    this._handles.destroy(), this.texture = r3(this.texture);
  }
  get textureSize() {
    if (!this.texture) return [1, 1];
    const t2 = this.texture.descriptor;
    return [t2.width, t2.height];
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(t2) {
    const e2 = this.element;
    if (null == e2) return;
    const { context: r4 } = t2, { videoWidth: i, videoHeight: s } = e2;
    if (0 !== i && 0 !== s) {
      if (this.texture) e2.paused || this.texture.setData(e2);
      else {
        const t3 = new a2();
        t3.wrapMode = P2.CLAMP_TO_EDGE, t3.preMultiplyAlpha = true, t3.width = i, t3.height = s, this.texture = new S(r4, t3, e2);
      }
      e2.paused || (this.texture.generateMipmap(), this.requestRender()), super.beforeRender(t2);
    }
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(t2, e2, r4, i) {
    const s = this.element, o2 = this._getFrameInfo();
    if (!s || !o2) return;
    const { spatialReference: n3 } = r4;
    this._initializeData(t2, o2, n3);
    const { controlPoints: a3, horizon: u5 } = o2, d2 = Math.sqrt(a3.length), c3 = d2, { x: p2, y: x3 } = t2, g = this._vertices, y = a3[0], w2 = a3[d2 - 1], P3 = a3[(c3 - 1) * d2], _2 = a3[(c3 - 1) * d2 + d2 - 1], v2 = O(u5 ? u5[0].mapPoint : y.mapPoint, n3), j = O(u5 ? u5[1].mapPoint : w2.mapPoint, n3), M = O(P3.mapPoint, n3), A = O(_2.mapPoint, n3);
    this.clipGeometry = u5 ? new n2({ geometry: P.fromJSON({ rings: [[[M.x, M.y], [A.x, A.y], [j.x, j.y], [v2.x, v2.y], [M.x, M.y]]], spatialReference: n3 }) }) : null;
    for (let h3 = 0; h3 < a3.length; h3++) {
      const t3 = a3[h3], { sourcePoint: e3, mapPoint: r5 } = t3;
      if (null == e3 || null == r5) continue;
      const i2 = O(r5, n3);
      g[h3 * f2 + 0] = i2.x - p2, g[h3 * f2 + 1] = i2.y - x3;
    }
    let b = e2;
    if (i) {
      const t3 = Math.min(v2.x, j.x, M.x, A.x), e3 = Math.max(v2.x, j.x, M.x, A.x), { worldWidth: r5, xBounds: s2 } = i, [o3, n4] = s2;
      t3 < o3 && e3 > o3 ? b = r5 : e3 > n4 && t3 < n4 && (b = -r5);
    }
    this.wrapAroundShift = b, this.isWrapAround = 0 !== b;
  }
  draw(t2, e2) {
    if (!this.visible) return;
    if (!(this.isReady && this._vertices && this._indices && this._texCoords)) return void this.requestRender();
    this.stage || console.warn("OverlayMultipoint: stage is null"), e2.render(t2, { transform: { dvs: this.dvsMat3 }, config: { perspective: this.perspectiveTransform, texSize: this.textureSize, wrapAroundShift: this.wrapAroundShift, isWrapAround: this.isWrapAround, opacity: this.opacity, texture: { texture: this.texture, unit: 0 } }, position: this._vertices, tex: this._texCoords, index: this._indices });
  }
  _initializeData(t2, e2, r4) {
    if (null != this._vertices && null != this._indices) return;
    const { controlPoints: i } = e2, s = Math.sqrt(i.length), o2 = s, n3 = new Float32Array(f2 * i.length), a3 = new Uint16Array(2 * i.length);
    for (let m4 = 0; m4 < i.length; m4++) {
      const e3 = i[m4], { sourcePoint: s2, mapPoint: o3 } = e3;
      if (null == s2 || null == o3) continue;
      const h4 = O(o3, r4);
      n3[m4 * f2 + 0] = h4.x - t2.x, n3[m4 * f2 + 1] = h4.y - t2.y, a3[2 * m4 + 0] = s2.x, a3[2 * m4 + 1] = s2.y;
    }
    const h3 = new Uint16Array(o2 * s + (o2 - 2) * (s + 2));
    let u5 = 0;
    for (let l3 = 0; l3 < o2; l3++) {
      for (let t3 = 0; t3 < s; t3++) h3[u5++] = l3 * s + t3, h3[u5++] = (l3 + 1) * s + t3;
      l3 < o2 - 2 && (h3[u5++] = (l3 + 1) * s + (s - 1), h3[u5++] = (l3 + 1) * s);
    }
    this._vertices = n3, this._texCoords = a3, this._indices = h3;
  }
  _getFrameInfo() {
    if (!this.groundControlPoints) return null;
    const t2 = this._getFrameControlPoints(), e2 = this.frameHorizonPoints;
    let r4 = null;
    if (e2) {
      const t3 = e2.startX, i = e2.startY, s = e2.endX, n3 = e2.endY;
      r4 = [{ sourcePoint: c(t3, i), mapPoint: new _(e2.startLongitude, e2.startLatitude) }, { sourcePoint: c(s, n3), mapPoint: new _(e2.endLongitude, e2.endLatitude) }];
    }
    return { controlPoints: t2, horizon: r4 };
  }
  _getFrameControlPoints() {
    const t2 = this.groundControlPoints, e2 = t2?.length;
    if (!e2) return [];
    const r4 = new Array(e2), i = Math.max(...t2.map((({ x: t3 }) => t3))), s = this.element.videoWidth / i;
    for (let n3 = 0; n3 < e2; n3++) {
      const { x: e3, y: i2, lat: h3, lon: l3 } = t2[n3];
      r4[n3] = { sourcePoint: c(e3 * s, -i2 * s), mapPoint: new _(l3, h3) };
    }
    return r4;
  }
};

// node_modules/@arcgis/core/views/2d/layers/VideoLayerView2D.js
var v = new l2([255, 127, 0]);
var T = 10005;
var w = 10018;
var O3 = class extends S3(u3) {
  constructor() {
    super(...arguments), this._graphicsLayer = new c2(), this._frameOutlineGraphic = new d({ symbol: new m3({ outline: { type: "simple-line", color: v } }) }), this._frameCenterGraphic = new d({ symbol: new u2({ color: v, style: "cross" }) }), this._sensorTrailGraphic = new d({ symbol: new m2({ color: v }) }), this._sensorSightlineGraphic = new d({ symbol: new m2({ color: v }) }), this._sensorLocationGraphic = new d({ symbol: new u2({ color: v }) }), this._overlayContainer = null, this._sensorLocationSymbolType = null, this.layer = null, this.sensorLocationSymbol = null, this.symbolAngle = 0, this.visibleTelemetryElements = null;
  }
  destroy() {
    this._graphicsLayer = u(this._graphicsLayer);
  }
  initialize() {
    this._sensorLocationSymbolType = this.layer?.sensorSymbol.type, this._graphicsLayer.graphics.addMany([this._frameCenterGraphic, this._frameOutlineGraphic, this._sensorLocationGraphic, this._sensorSightlineGraphic, this._sensorTrailGraphic]), this.visibleTelemetryElements = new p({ frame: this.layer.telemetryDisplay?.frame ?? false, frameCenter: this.layer.telemetryDisplay?.frameCenter ?? true, frameOutline: this.layer.telemetryDisplay?.frameOutline ?? true, lineOfSight: this.layer.telemetryDisplay?.lineOfSight ?? true, sensorLocation: this.layer.telemetryDisplay?.sensorLocation ?? true, sensorTrail: this.layer.telemetryDisplay?.sensorTrail ?? true });
  }
  attach() {
    this._overlayContainer = new u4(), this.container.addChild(this._overlayContainer), this._addOverlayMultipoint(), this.graphicsView = new O2({ requestUpdateCallback: () => this.requestUpdate(), view: this.view, graphics: this._graphicsLayer.graphics, container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this.graphicsView.container), this.addAttachHandles(this._graphicsLayer.on("graphic-update", this.graphicsView.graphicUpdateHandler)), this.addAttachHandles([l((() => [this.layer.telemetryDisplay?.frame, this.layer.telemetryDisplay?.frameCenter, this.layer.telemetryDisplay?.frameOutline, this.layer.telemetryDisplay?.sensorLocation, this.layer.telemetryDisplay?.sensorTrail, this.layer.telemetryDisplay?.lineOfSight]), (() => this._updateVisibleTelemetryElements()), h), l((() => [this.layer.telemetry, this.visibleTelemetryElements?.frameCenter, this.visibleTelemetryElements?.frameOutline, this.visibleTelemetryElements?.sensorLocation, this.visibleTelemetryElements?.sensorTrail, this.visibleTelemetryElements?.lineOfSight]), (() => this._updateGraphicGeometries()), h), l((() => this.layer.metadata), (() => this._updateSensorLocationSymbolAngle()), h), l((() => this.layer?.frameCenterSymbol), (() => this._updateFrameCenterSymbol()), h), l((() => this.layer?.frameOutlineSymbol), (() => this._updateFrameOutlineSymbol()), h), l((() => this.layer?.sensorSightLineSymbol), (() => this._updateSensorSightlineSymbol()), h), l((() => this.layer?.sensorSymbol), (() => this._updateSensorLocationSymbol()), h), l((() => this.layer?.sensorTrailSymbol), (() => this._updateSensorTrailSymbol()), h), l((() => this.symbolAngle), (() => this._updateSensorLocationSymbol()), h)]);
  }
  detach() {
    this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this.graphicsView = u(this.graphicsView);
  }
  supportsSpatialReference(e2) {
    return true;
  }
  moveEnd() {
  }
  viewChange() {
    this.graphicsView.viewChange();
  }
  update(e2) {
    this.graphicsView.processUpdate(e2);
  }
  isUpdating() {
    return !this.graphicsView || this.graphicsView.updating;
  }
  _updateVisibleTelemetryElements() {
    this.visibleTelemetryElements && this.layer.telemetryDisplay && (this.visibleTelemetryElements.frame = this.layer.telemetryDisplay.frame, this.visibleTelemetryElements.frameCenter = this.layer.telemetryDisplay.frameCenter, this.visibleTelemetryElements.frameOutline = this.layer.telemetryDisplay.frameOutline, this.visibleTelemetryElements.lineOfSight = this.layer.telemetryDisplay.lineOfSight, this.visibleTelemetryElements.sensorLocation = this.layer.telemetryDisplay.sensorLocation, this.visibleTelemetryElements.sensorTrail = this.layer.telemetryDisplay.sensorTrail);
  }
  _updateGraphicGeometries() {
    const { telemetry: e2 } = this.layer, { visibleTelemetryElements: t2 } = this;
    e2 && t2 && (t2.frameOutline && e2.frameOutline ? this._frameOutlineGraphic.geometry = this.layer.telemetry.frameOutline : this._frameOutlineGraphic.geometry = null, t2.sensorTrail && e2.sensorTrail ? this._sensorTrailGraphic.geometry = this.layer.telemetry.sensorTrail : this._sensorTrailGraphic.geometry = null, t2.lineOfSight && e2.lineOfSight ? this._sensorSightlineGraphic.geometry = this.layer.telemetry.lineOfSight : this._sensorSightlineGraphic.geometry = null, t2.sensorLocation && e2.sensorLocation ? this._sensorLocationGraphic.geometry = this.layer.telemetry.sensorLocation : this._sensorLocationGraphic.geometry = null, t2.frameCenter && e2.frameCenter ? this._frameCenterGraphic.geometry = this.layer.telemetry.frameCenter : this._frameCenterGraphic.geometry = null);
  }
  _updateSensorLocationSymbolAngle() {
    if (!this.layer?.metadata?.size) return;
    const { source: e2, symbolOffset: t2 = 0 } = this.layer.sensorSymbolOrientation || {};
    if (!e2 && !t2) return;
    const i = this.layer?.metadata?.get(T)?.value ?? 0, s = this.layer?.metadata?.get(w)?.value ?? 0, r4 = h2({ cameraAzimuth: s, platformHeading: i, source: this.layer.sensorSymbolOrientation?.source, symbolOffset: this.layer.sensorSymbolOrientation?.symbolOffset ?? 0 });
    this.symbolAngle = Math.round(Math.abs(r4));
  }
  _updateSensorLocationSymbol() {
    switch (this._sensorLocationSymbolType) {
      case "simple-marker":
        this.sensorLocationSymbol = this.layer.sensorSymbol.clone(), this.sensorLocationSymbol.angle = this.symbolAngle, this._sensorLocationGraphic.symbol = this.sensorLocationSymbol.clone();
        break;
      case "picture-marker":
        this.sensorLocationSymbol = this.layer.sensorSymbol, this.sensorLocationSymbol.angle = this.symbolAngle, this._sensorLocationGraphic.symbol = this.sensorLocationSymbol;
        break;
      case "cim":
        this.sensorLocationSymbol = this.layer.sensorSymbol, S2(this.sensorLocationSymbol, this.symbolAngle, true), this._sensorLocationGraphic.symbol = this.sensorLocationSymbol;
    }
  }
  _updateFrameCenterSymbol() {
    this.layer?.frameCenterSymbol && (this._frameCenterGraphic.symbol = this.layer.frameCenterSymbol.clone());
  }
  _updateFrameOutlineSymbol() {
    this.layer?.frameOutlineSymbol && (this._frameOutlineGraphic.symbol = this.layer.frameOutlineSymbol.clone());
  }
  _updateSensorSightlineSymbol() {
    this.layer?.sensorSightLineSymbol && (this._sensorSightlineGraphic.symbol = this.layer.sensorSightLineSymbol.clone());
  }
  _updateSensorTrailSymbol() {
    this.layer?.sensorTrailSymbol && (this._sensorTrailGraphic.symbol = this.layer.sensorTrailSymbol.clone());
  }
  async _addOverlayMultipoint() {
    if (!this.layer.videoElement) return;
    const e2 = new x2(this.layer.videoElement);
    this.addAttachHandles([l((() => [this.layer.frameHorizonPoints, this.layer.groundControlPoints, this.layer.frameOpacity, this.layer.telemetryDisplay?.frame]), (() => {
      const { visibleTelemetryElements: t2 } = this;
      e2.frameHorizonPoints = this.layer.frameHorizonPoints, e2.groundControlPoints = this.layer.groundControlPoints, e2.opacity = this.layer.frameOpacity, e2.visible = t2?.frame ?? false;
    }), h)]), this._overlayContainer.addChild(e2), this.view.stage.requestRender();
  }
};
r([m()], O3.prototype, "graphicsView", void 0), r([m()], O3.prototype, "layer", void 0), r([m({ types: x })], O3.prototype, "sensorLocationSymbol", void 0), r([m()], O3.prototype, "symbolAngle", void 0), r([m({ type: p })], O3.prototype, "visibleTelemetryElements", void 0), O3 = r([a("esri.views.2d.layers.VideoLayerView2D")], O3);
var C = O3;
export {
  C as default
};
//# sourceMappingURL=VideoLayerView2D-DDZTKZAR.js.map
