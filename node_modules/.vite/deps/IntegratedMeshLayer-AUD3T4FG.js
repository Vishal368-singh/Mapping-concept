import {
  n
} from "./chunk-7USBALU3.js";
import {
  a as a4,
  m as m3,
  p as p2,
  y
} from "./chunk-WJQINQW6.js";
import {
  R,
  V
} from "./chunk-W4GDRLOT.js";
import {
  $,
  Z,
  w
} from "./chunk-WHNSSW5C.js";
import "./chunk-S3AR7JPP.js";
import "./chunk-NSRXHIXQ.js";
import "./chunk-NCWIYJUO.js";
import {
  i as i2
} from "./chunk-FPEM525U.js";
import {
  l
} from "./chunk-NFFAJ4DB.js";
import "./chunk-OCWOGVIP.js";
import "./chunk-FCHFP4ZB.js";
import "./chunk-MFXSVG6W.js";
import {
  v
} from "./chunk-NEEFYZNY.js";
import "./chunk-MBPP56MY.js";
import "./chunk-WSMONZ65.js";
import {
  e
} from "./chunk-ZCJRU3EA.js";
import {
  b2 as b,
  m as m2
} from "./chunk-DTTR5ASY.js";
import {
  j
} from "./chunk-ATYN34E4.js";
import {
  S
} from "./chunk-I4RWKHDS.js";
import "./chunk-ETWYHKOD.js";
import "./chunk-ZT7UIVVR.js";
import "./chunk-PPURGUUD.js";
import "./chunk-BCN3HEUP.js";
import "./chunk-JID2PGFV.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-AIZOVCLV.js";
import "./chunk-FV6ZNHFI.js";
import {
  t
} from "./chunk-GDFRDXFB.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-57B3FMIY.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import {
  h
} from "./chunk-ISLYMPIF.js";
import "./chunk-EWC2SUBD.js";
import "./chunk-X2R3FJBU.js";
import "./chunk-BTVDNPEM.js";
import "./chunk-3U5B3VOX.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-MHZNPCC3.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-D4S6H6HS.js";
import "./chunk-IDSV3U3M.js";
import "./chunk-N7OU5PYY.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-3LTBYQQS.js";
import "./chunk-YXZLRZNZ.js";
import "./chunk-YVNZKO6I.js";
import {
  U,
  a as a3
} from "./chunk-27M3EN5Y.js";
import "./chunk-DQBIAKCW.js";
import "./chunk-MOMLPET6.js";
import "./chunk-P5FXO7WR.js";
import "./chunk-UCCG5WDW.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-WAXP6XIO.js";
import "./chunk-IVKSCXGN.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-DDNC6A36.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-T6TMEQJ7.js";
import "./chunk-5DBBCQVU.js";
import {
  o
} from "./chunk-MNW46TV4.js";
import "./chunk-JSWMPOBX.js";
import "./chunk-SSVCVBFL.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-5KQMTKIZ.js";
import "./chunk-PYBAZ6YE.js";
import "./chunk-YC5GI5YQ.js";
import {
  m
} from "./chunk-RJI4N3LT.js";
import {
  a2 as a
} from "./chunk-QSG5WGQI.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-CM3TIXEV.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3TN73U7K.js";
import "./chunk-SL5A7INV.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  p
} from "./chunk-YO7WHZZ7.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-JNYZ3I5R.js";
import {
  a as a2
} from "./chunk-Q6OL33PY.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/IntegratedMeshLayer.js
var A = class extends R(l(b(j(t(S(e(i2(h)))))))) {
  constructor(...e2) {
    super(...e2), this.geometryType = "mesh", this.operationalLayerType = "IntegratedMeshLayer", this.type = "integrated-mesh", this.nodePages = null, this.materialDefinitions = null, this.textureSetDefinitions = null, this.geometryDefinitions = null, this.serviceUpdateTimeStamp = null, this.profile = "mesh-pyramids", this.modifications = null, this.path = null, this.definitionExpression = null;
  }
  initialize() {
    this.addHandles(a3((() => this.modifications), "after-changes", (() => this.modifications = this.modifications), U));
  }
  normalizeCtorArgs(e2, t2) {
    return "string" == typeof e2 ? { url: e2, ...t2 } : e2;
  }
  readModifications(e2, t2, o2) {
    this._modificationsSource = { url: p(e2, o2), context: o2 };
  }
  set elevationInfo(e2) {
    null != e2 && "absolute-height" !== e2.mode || this._set("elevationInfo", e2), this._validateElevationInfo(e2);
  }
  async load(e2) {
    return this.addResolvingPromise(this._doLoad(e2)), this;
  }
  async _doLoad(e2) {
    const t2 = e2?.signal;
    try {
      await this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e2);
    } catch (o2) {
      a2(o2);
    }
    if (await this._fetchService(t2), null != this._modificationsSource) {
      const t3 = await n.fromUrl(this._modificationsSource.url, this.spatialReference, e2);
      this.setAtOrigin("modifications", t3, this._modificationsSource.context.origin), this._modificationsSource = null;
    }
    await this._fetchIndexAndUpdateExtent(this.nodePages, t2);
  }
  beforeSave() {
    if (null != this._modificationsSource) return this.load().then((() => {
    }), (() => {
    }));
  }
  async saveAs(e2, t2) {
    return this._debouncedSaveOperations(V.SAVE_AS, { ...t2, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" }, e2);
  }
  async save() {
    const e2 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" };
    return this._debouncedSaveOperations(V.SAVE, e2);
  }
  validateLayer(e2) {
    if (e2.layerType && "IntegratedMesh" !== e2.layerType) throw new s("integrated-mesh-layer:layer-type-not-supported", "IntegratedMeshLayer does not support this layer type", { layerType: e2.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor)) throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
    if (this.version.major > 1) throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
  }
  _getTypeKeywords() {
    return ["IntegratedMeshLayer"];
  }
  _validateElevationInfo(e2) {
    const t2 = "Integrated mesh layers";
    $(i.getLogger(this), Z(t2, "absolute-height", e2)), $(i.getLogger(this), w(t2, e2));
  }
};
r([m({ type: String, readOnly: true })], A.prototype, "geometryType", void 0), r([m({ type: ["show", "hide"] })], A.prototype, "listMode", void 0), r([m({ type: ["IntegratedMeshLayer"] })], A.prototype, "operationalLayerType", void 0), r([m({ json: { read: false }, readOnly: true })], A.prototype, "type", void 0), r([m({ type: p2, readOnly: true })], A.prototype, "nodePages", void 0), r([m({ type: [a4], readOnly: true })], A.prototype, "materialDefinitions", void 0), r([m({ type: [y], readOnly: true })], A.prototype, "textureSetDefinitions", void 0), r([m({ type: [m3], readOnly: true })], A.prototype, "geometryDefinitions", void 0), r([m({ readOnly: true })], A.prototype, "serviceUpdateTimeStamp", void 0), r([m({ type: n, clonable: (e2) => e2.clone() }), v({ origins: ["web-scene", "portal-item"], type: "resource", prefix: "modifications" })], A.prototype, "modifications", void 0), r([o(["web-scene", "portal-item"], "modifications")], A.prototype, "readModifications", null), r([m(m2)], A.prototype, "elevationInfo", null), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], A.prototype, "path", void 0), A = r([a("esri.layers.IntegratedMeshLayer")], A);
var P = A;
export {
  P as default
};
//# sourceMappingURL=IntegratedMeshLayer-AUD3T4FG.js.map
