import {
  p
} from "./chunk-7LWCMMSB.js";
import "./chunk-V5GIC4SS.js";
import {
  B
} from "./chunk-53X5LI6T.js";
import "./chunk-IKYEKMWB.js";
import "./chunk-M72BPMIY.js";
import "./chunk-T7BLJR6Y.js";
import "./chunk-CNAPAPCO.js";
import "./chunk-NN5O537H.js";
import "./chunk-ZTP32NOX.js";
import "./chunk-WBRO5HGL.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-T4WPBSSK.js";
import "./chunk-7Q65H3HK.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-JID2PGFV.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-D4S6H6HS.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-N7OU5PYY.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-3LTBYQQS.js";
import "./chunk-IVKSCXGN.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-DDNC6A36.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-T6TMEQJ7.js";
import "./chunk-5DBBCQVU.js";
import "./chunk-MNW46TV4.js";
import "./chunk-JSWMPOBX.js";
import "./chunk-SSVCVBFL.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-5KQMTKIZ.js";
import "./chunk-PYBAZ6YE.js";
import "./chunk-YC5GI5YQ.js";
import "./chunk-RJI4N3LT.js";
import "./chunk-QSG5WGQI.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-3TN73U7K.js";
import "./chunk-SL5A7INV.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-YO7WHZZ7.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-JNYZ3I5R.js";
import {
  s as s2
} from "./chunk-Q6OL33PY.js";
import {
  a,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/convertMeshVertexSpace.js
async function i(i2, n, c) {
  await Promise.resolve(), s2(c);
  const l = B(i2, n, { useEllipsoid: c?.useEllipsoid });
  if (!l) throw new s("meshUtils:convertVertexSpace()", "Failed to convert to provided vertex space due to projection errors");
  const m = i2.cloneAndModifyVertexAttributes(new p({ ...l, uv: a(i2.vertexAttributes.uv), color: a(i2.vertexAttributes.color) }), n);
  return m.transform = null, m;
}
export {
  i as convertMeshVertexSpace
};
//# sourceMappingURL=convertMeshVertexSpace-LMOPEZLD.js.map
